import time

def printBoard(board):
    for row in board:
        print(" ".join(row))
    print()

def placeQueens(i, cols, leftDiagonal, rightDiagonal, cur, board):
    n = len(cols)
    if i == n:
        print(" Final Solution:")
        printBoard(board)
        return True

    for j in range(n):
        if cols[j] or rightDiagonal[i + j] or leftDiagonal[i - j + n - 1]:
            continue

        board[i][j] = 'Q'
        print(f"Placing queen at row {i}, column {j}")
        printBoard(board)
        time.sleep(0.3)

        cols[j] = 1
        rightDiagonal[i + j] = 1
        leftDiagonal[i - j + n - 1] = 1
        cur.append(j)

        if placeQueens(i + 1, cols, leftDiagonal, rightDiagonal, cur, board):
            return True

        print(f"Backtracking from row {i}, column {j}")
        board[i][j] = '.'
        printBoard(board)
        time.sleep(0.3)

        cur.pop()
        cols[j] = 0
        rightDiagonal[i + j] = 0
        leftDiagonal[i - j + n - 1] = 0

    return False

def nQueen(n):
    cols = [0] * n
    leftDiagonal = [0] * (n * 2)
    rightDiagonal = [0] * (n * 2)
    cur = []
    board = [['.' for _ in range(n)] for _ in range(n)]

    print("Starting N-Queen Backtracking Steps:\n")
    if not placeQueens(0, cols, leftDiagonal, rightDiagonal, cur, board):
        print("‚ùå No solution exists.")

n = int(input("Enter the number of queens: "))
nQueen(n)
